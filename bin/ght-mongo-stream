#!/usr/bin/env ruby

require 'mongo'
require 'azure'
require 'yaml'
require 'json'

require 'streaming'

include Settings
include Logging

def settings
  @settings
end

class BSON::OrderedHash

  # Convert a BSON result to a +Hash+
  def to_h
    inject({}) do |acc, element|
      k, v = element;
      acc[k] = if v.class == Array then
                 v.map{|x| if x.class == BSON::OrderedHash then x.to_h else x end}
               elsif v.class == BSON::OrderedHash then
                 v.to_h
               else
                 v
               end;
      acc
    end
  end

  def to_json
    to_h.to_json
  end
end

class EventDispatcher

  def initialize
    @consumers = []
  end

  def add_consumer(consumer)
    @consumers << consumer
  end

  def insert(db_name, collection_name, document)
    puts "Insert to #{db_name}.#{collection_name}: #{document['_id']}"
    @consumers.each { |c| c.write(document.to_json, collection_name, :insert) }
  end

  def delete(db_name, collection_name, document)
    debug "Remove from #{db_name}.#{collection_name}: #{document['_id']}"
    @consumers.each { |c| c.write(document.to_json, collection_name, :remove) }
  end

  def update(db_name, collection_name, selector, update)
    debug "Update #{db_name}.#{collection_name}: #{document['_id']}"
    @consumers.each { |c| c.write(document.to_json, collection_name, :update) }
  end

end

if ARGV[0].nil?
  puts "usage: ght-mongo-streamer conf.yaml"
  exit(1)
end

@settings = YAML::load_file(ARGV[0])

hosts = if conf(:mongo_replicas).nil? then
  ["#{conf(:mongo_host)}:#{conf(:mongo_port)}"]
else
  ["#{conf(:mongo_host)}:#{conf(:mongo_port)}"] + conf(:mongo_replicas).strip.split(/ /)
end

Mongo::Logger.logger.level = Logger::WARN
mongo = Mongo::Client.new(hosts,
    :database => conf(:mongo_db),
    :password => conf(:mongo_passwd),
    :user => conf(:mongo_username),
    :auth_source => 'admin',
    :read => {
      :mode => :secondary_preferred
    },
    :retry_reads => true,
    :retry_writes => true,
    :write_concern => {
      :w => "majority",
      :j => true
    }
)

outlet = EventDispatcher.new

conf(:outputs).each do |setting|
  case setting
    when 'azure'
      azure = AzureSbHttp.new
      azure.configure(settings)
      outlet.add_consumer(azure)
      debug "Adding Azure consumer"
    when 'amqp'
      amqp = AMQP.new
      amqp.configure(settings)
      outlet.add_consumer(amqp)
      debug "Adding AMQP consumer"
    when 'gpubsub'
      gpubsub = GPubSub.new
      gpubsub.configure(settings)
      outlet.add_consumer(gpubsub)
      debug "Adding pubsub consumer"
    else
      raise StandardError.new("Don't know output stream #{setting}")
  end
end

token = nil
stream = mongo.watch([], resume_after: token)

while true
  begin
    enum = stream.to_enum
    while doc = enum.next
      case doc[:operationType]
      when /insert/ then
        outlet.insert(doc[:ns][:db], doc[:ns][:coll], doc[:fullDocument])
      else
        puts "Uknown event type: #{doc[:operationType]}"
      end
      token = stream.resume_token
    end
  rescue SystemExit, Interrupt
    stream.close
    puts "Done"
    exit(0)
  rescue Mongo::Error
    sleep 1
  end
end
